define("block_sharing_cart/app/block/event_handler",["exports"],(function(_exports){function _classPrivateFieldInitSpec(obj,privateMap,value){!function(obj,privateCollection){if(privateCollection.has(obj))throw new TypeError("Cannot initialize the same private elements twice on an object")}(obj,privateMap),privateMap.set(obj,value)}function _classPrivateFieldSet(receiver,privateMap,value){return function(receiver,descriptor,value){if(descriptor.set)descriptor.set.call(receiver,value);else{if(!descriptor.writable)throw new TypeError("attempted to set read only private field");descriptor.value=value}}(receiver,_classExtractFieldDescriptor(receiver,privateMap,"set"),value),value}function _classExtractFieldDescriptor(receiver,privateMap,action){if(!privateMap.has(receiver))throw new TypeError("attempted to "+action+" private field on non-instance");return privateMap.get(receiver)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0;var _baseFactory=new WeakMap;return _exports.default=class{constructor(baseFactory){_classPrivateFieldInitSpec(this,_baseFactory,{writable:!0,value:void 0}),_classPrivateFieldSet(this,_baseFactory,baseFactory)}onLoad(canBackupUserdata,canAnonymizeUserdata,canBackup,showSharingCartBasket){return this.setupBlock(canBackupUserdata,canAnonymizeUserdata,canBackup,showSharingCartBasket)}setupBlock(canBackupUserdata,canAnonymizeUserdata,canBackup,showSharingCartBasket){const block=document.querySelector(".block.block_sharing_cart");var receiver,privateMap;return(receiver=this,privateMap=_baseFactory,function(receiver,descriptor){return descriptor.get?descriptor.get.call(receiver):descriptor.value}(receiver,_classExtractFieldDescriptor(receiver,privateMap,"get"))).block().element(block,canBackupUserdata,canAnonymizeUserdata,canBackup,showSharingCartBasket).addEventListeners()}},_exports.default}));

//# sourceMappingURL=event_handler.min.js.map